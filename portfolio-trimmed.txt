<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     width="1024" height="1500"
     viewBox="0 0 1024 1500"
     preserveAspectRatio="xMidYMid slice"
     style="width:100%;height:auto;min-height:1500px;">

  <defs>
    <mask id="windowMask" maskUnits="userSpaceOnUse">
      <!-- #frame-mask -->
      <image href=""
             x="0" y="0"
             width="1024" height="1500"
             preserveAspectRatio="xMidYMid slice"/>
    </mask>
    <mask id="screenMask" maskUnits="userSpaceOnUse">
      <!-- #laptop_mask -->
      <image href=""
             x="0" y="570"
             width="1024" height="1024"/>
    </mask>
  </defs>
  <!-- #loadingOverlay -->
  <g id="loadingOverlay">
    <rect x="0" y="0" width="1024" height="1500"
          fill="rgba(0,0,0,0.7)"/>
    <text x="512" y="750" font-size="48" fill="#fff"
          text-anchor="middle" alignment-baseline="middle">
      Loading...
    </text>
  </g>
  <!-- #backScene -->
  <g mask="url(#windowMask)" id="backScene">
    <!-- #sky-night -->
    <image id="sky"
           href=""
           x="0" y="0"
           width="1024" height="1500"/>
    <!-- #moon-default -->
    <image id="moon" href="" width="600" height="600">
      <animateTransform
        attributeName="transform"
        type="translate"
        from="225 -1500" to="225 300"
        begin="0s" dur="2s"
        fill="freeze"/>
    </image>
  </g>
  <!-- #frame-mask -->
  <image href=""
         x="0" y="0"
         width="1024" height="1500"
         preserveAspectRatio="xMidYMid slice"/>
  <!-- #burger -->
  <g id="burger" style="cursor:pointer;">
    <rect x="20" y="20" width="40" height="5" fill="#fff"/>
    <rect x="20" y="32" width="40" height="5" fill="#fff"/>
    <rect x="20" y="44" width="40" height="5" fill="#fff"/>
  </g>
  <!-- #overlay -->
  <g id="overlay" visibility="hidden">
    <rect x="0" y="0" width="1024" height="1500"
          fill="rgba(0,0,0,0.8)"/>
    <text id="scandiFilter"
          x="512" y="50"
          font-size="32"
          fill="#fff"
          text-anchor="middle"
          alignment-baseline="middle"
          style="cursor:pointer;">
      Scandinavian
    </text>
    <text id="closeFilter"
          x="1000" y="50"
          font-size="32"
          fill="#fff"
          text-anchor="end"
          alignment-baseline="hanging"
          style="cursor:pointer;">
      ✕
    </text>
  </g>
  <!-- #carouselGroup -->
  <g id="carouselGroup">
    <image id="carouselImage"
           x="0" y="460"
           width="1024" height="1024"
           mask="url(#screenMask)"
           style="pointer-events: none;"/>
    <foreignObject id="carouselButtons"
                   x="412" y="1440"
                   width="200" height="60">
      <body xmlns="http://www.w3.org/1999/xhtml"
            style="margin:0;display:flex;gap:8px;justify-content:center;">
        <button id="viewButton"
                style="flex:1;padding:8px;border:none;border-radius:4px;cursor:pointer;">
          View
        </button>
        <button id="githubButton"
                style="flex:1;padding:8px;border:none;border-radius:4px;cursor:pointer;">
          GitHub
        </button>
      </body>
    </foreignObject>
  </g>
  <!-- #laptop -->
  <image href=""
         x="0" y="570"
         width="1024" height="1024"
         style="pointer-events:none;"/>
  <!-- #arrowLeft -->
  <g id="arrowLeft" transform="translate(50,812) rotate(180)" style="cursor:pointer;">
    <polygon points="0,-40 30,0 0,40" fill="#b22222" opacity="0.7"/>
  </g>
  <!-- #arrowRight -->
  <g id="arrowRight" transform="translate(974,812)" style="cursor:pointer;">
    <polygon points="0,-40 30,0 0,40" fill="#b22222" opacity="0.7"/>
  </g>

  <script type="application/ecmascript"><![CDATA[
    // preloadAllImages
    function preloadAllImages() {
      const doc = document;
      const loader = doc.getElementById('loadingOverlay');
      if (!loader) return;

      const urls = Array.from(doc.querySelectorAll('image'))
        .map(img =>
          img.getAttribute('href') ||
          img.getAttributeNS('http://www.w3.org/1999/xlink','href')
        )
        .filter(Boolean);

      const unique = Array.from(new Set(urls));
      if (unique.length === 0) {
        loader.setAttribute('visibility','hidden');
        return;
      }

      let count = 0;
      unique.forEach(src => {
        const i = new Image();
        i.onload  = i.onerror = () => {
          if (++count === unique.length) {
            loader.setAttribute('visibility','hidden');
          }
        };
        i.src = src;
      });
    }

    // Projects
    const projects = [
      {
        title: "Horror Site",
        thumbnail: "",
        url: "https://example.com/horror",
        category: "horror",
        github: "https://github.com/users/PhantomDraft/projects/2"
      },
      {
        title: "Scandinavian Blog",
        thumbnail: "",
        url: "https://example.com/scandi",
        category: "scandinavian"
      }
    ];

    // Carousel
    class Carousel {
      constructor(imgEl, leftEl, rightEl, viewBtn, githubBtn, images) {
        this.imgEl     = imgEl;
        this.leftEl    = leftEl;
        this.rightEl   = rightEl;
        this.viewBtn   = viewBtn;
        this.githubBtn = githubBtn;
        this.images    = images;
        this.current   = 0;
      }
      init() {
        this.show();
        this.leftEl.addEventListener('click', ()=> this.prev());
        this.rightEl.addEventListener('click', ()=> this.next());
        window.addEventListener('keydown', e=> {
          if (e.key === 'ArrowLeft')  this.prev();
          if (e.key === 'ArrowRight') this.next();
        });
        this.imgEl.addEventListener('touchstart', e=> this._startX = e.touches[0].clientX);
        this.imgEl.addEventListener('touchend', e=> {
          const d = e.changedTouches[0].clientX - this._startX;
          if (d > 50)  this.prev();
          if (d < -50) this.next();
        });
      }
      update(images) {
        this.images  = images;
        this.current = 0;
        this.show();
      }
      show() {
        const it = this.images[this.current];
        if (!it) return;
        this.imgEl.href.baseVal = it.thumbnail;
        // View
        this.viewBtn.onclick = ()=> window.open(it.url, '_blank');
        // GitHub
        if (it.github) {
          this.githubBtn.style.display = 'inline-block';
          this.githubBtn.onclick = ()=> window.open(it.github, '_blank');
        } else {
          this.githubBtn.style.display = 'none';
        }
      }
      next() {
        this.current = (this.current + 1) % this.images.length;
        this.show();
      }
      prev() {
        this.current = (this.current - 1 + this.images.length) % this.images.length;
        this.show();
      }
    }

    // init
    (function(){
      // el
      const svgEl    = document.documentElement;
      const moon     = document.getElementById('moon');
      const burger   = document.getElementById('burger');
      const overlay  = document.getElementById('overlay');
      const scandi   = document.getElementById('scandiFilter');
      const closeF   = document.getElementById('closeFilter');
      const imgEl    = document.getElementById('carouselImage');
      const linkEl   = document.getElementById('carouselLink');
      const leftEl   = document.getElementById('arrowLeft');
      const rightEl  = document.getElementById('arrowRight');
      const viewBtn   = document.getElementById('viewButton');
      const githubBtn = document.getElementById('githubButton');

      // URLSearchParams
      const params = new URLSearchParams(window.location.search);
      let filter = params.get('filter') === 'scandinavian' ? 'scandinavian' : null;

      // Carousel
      const carousel = new Carousel(imgEl, leftEl, rightEl, viewBtn, githubBtn, []);
      carousel.init();

      // applyFilter
      function applyFilter() {
        if (filter === 'scandinavian') {
          // moon-scandi
          moon.setAttribute('href','');
          carousel.update(projects.filter(p=>p.category==='scandinavian'));
        } else {
          // moon-default
          moon.setAttribute('href','');
          carousel.update(projects);
        }
      }

      // UI: burger, filter's
      burger.addEventListener('click', ()=>{
        overlay.setAttribute('visibility','visible');
        svgEl.style.height   = window.innerHeight + 'px';
        svgEl.style.overflow = 'hidden';
        window.scrollTo({ top: 0, behavior: 'instant' });
      });
      scandi.addEventListener('click', ()=>{
        filter = 'scandinavian';
        params.set('filter',filter);
        history.replaceState(null,'','?'+params.toString());
        overlay.setAttribute('visibility','hidden');
        applyFilter();
      });
      closeF.addEventListener('click', ()=>{
        filter = null;
        params.delete('filter');
        history.replaceState(null,'', window.location.pathname);
        overlay.setAttribute('visibility','hidden');
        svgEl.style.height   = '';
        svgEl.style.overflow = '';
        applyFilter();
      });

      // smoothScrollTo
      function smoothScrollTo(toY, duration = 800) {
        const startY = window.pageYOffset;
        const change = toY - startY;
        const startTime = performance.now();

        function easeInOutQuad(t) {
          return t < 0.5
            ? 2 * t * t
            : -1 + (4 - 2 * t) * t;
        }

        function step(now) {
          const elapsed = now - startTime;
          const t = Math.min(elapsed / duration, 1);
          const eased = easeInOutQuad(t);
          window.scrollTo(0, startY + change * eased);
          if (t < 1) requestAnimationFrame(step);
        }

        requestAnimationFrame(step);
      }

      // applyFilter (!loader)
      applyFilter();

      // scroll
      window.addEventListener('load', () => {
        setTimeout(() => {
          const el = document.getElementById('carouselGroup');
          if (!el) return;
          const targetY = el.getBoundingClientRect().top + window.pageYOffset;
          smoothScrollTo(targetY, 1000);  // длительность 1000 мс
        }, 500);
      });
    })();
  ]]></script>

</svg>